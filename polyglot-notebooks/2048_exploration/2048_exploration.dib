#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

Noodling around the idea of how to reproduce 2048 in C# as a possible road to recreating something along the lines of Hues in Godot for Android. 

![Hues Screenshot](images/hues.png)

The following are my live notes and code tests as I was working through this. The full `GameBoard` class is in [2048_GameBoard_source.cs](2048_GameBoard_source.cs).

I think there are functionally just a few pieces of logic that need to be handled. The first being just setting up the game board. I think the easiest way to manage this is just a jagged int array.

#!csharp

class GameBoard
{
	public int[][] gameBoard;

	public GameBoard()
	{
		gameBoard = new int[4][];

		for (int i = 0; i < 4; i++) {
			gameBoard[i] = new int[] { 0, 0, 0, 0 };
		}
	}

	public override string ToString() {
		string board = "";

		foreach (var row in gameBoard)
		{
			foreach (var tile in row)
			{
				board += $"| {tile} ";
			}
			board += "|\n";
		}

		return board;
	}
}

#!csharp

var gb = new GameBoard();
Console.WriteLine(gb.ToString());

#!markdown

The next is to be able to add a random piece into the board. This is typically the `2` or `4` piece. I think I'd like this to be weighted toward the `2`, but that's a problem I can deal with in the future. 

I need to generate a `2` or a `4` randomly. Then I need to randomly select an empty (`0` value) spot in the gameBoard array.

#!csharp

var rnd = new Random();

int newTile = rnd.Next(1, 2) * 2;

#!markdown

I'm considering how I can get that collection of values. I'm sure there's a straight forward LINQ method to be able to grab the index of each instance where value is `0`. The question is how I collect that information and then filter it by a random value. 

The primary thing to do is figure out how many values I have. Which means I'm probably cramming those values into an array. I can use `.Count()` to get the number of items in the array and then `rnd.Next(0, count)`. 

Hmm. I wonder if a bidimensional array would be better choice in this instance. 

#!csharp

var testBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };

var board = "";

for (int i = 0; i < 4; i++)
{
	for (int j = 0; j < 4; j++)
	{
		board += $"| {testBoard[i,j]} ";
	}
	board += "|\n";
}
Console.WriteLine(board);

#!markdown

That gives me the same output and skips iterating through initialization in the constructor. I think I like this a little bit better than my initial approach. I suspect it'll make finding empty tiles easier, but I don't actually know that for sure right now. 

#!csharp

class GameBoard
{
	public int[,] testBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };

	public override string ToString() {
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				board += $"| {testBoard[i,j]} ";
			}
			board += "|\n";
		}

		return board;
	}
}

#!csharp

var gb = new GameBoard();
Console.WriteLine(gb.ToString());

#!markdown

It doesn't feel like a great solution, but I could return the index values as a tuple list. `List<(int, int)>`. Iterate through the values and return that list of of tuple values.

I could also use a method to ugly up that board a bit. Add some random values in there. 

#!csharp

class GameBoard
{
	public int[,] testBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };

	public override string ToString() {
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				board += $"| {testBoard[i,j]} ";
			}
			board += "|\n";
		}

		return board;
	}

	public List<(int, int)> GetOpenTiles()
	{
		List<(int, int)> openTiles = [];

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (testBoard[i,j] == 0)
				{
					openTiles.Add((i, j));
				}
			}
		}

		return openTiles;

	}

	public (int, int) GetRandomOpenTile()
	{
		var openTiles = GetOpenTiles();
		var r = new Random();
		return openTiles[r.Next(0, openTiles.Count())];
	}

	public void UglyUpThePlace()
	{
		var r = new Random();

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				testBoard[i,j] = r.Next(0,3) * 2;
			}
		}
	}
}

#!csharp

var gb = new GameBoard();
Console.WriteLine(gb.ToString());
for (int i = 0; i < 5; i++)
{
	Console.WriteLine(gb.GetRandomOpenTile());
}
gb.UglyUpThePlace();
Console.WriteLine(gb.ToString());
for (int i = 0; i < 5; i++)
{
	Console.WriteLine(gb.GetRandomOpenTile());
}

#!markdown

Getting all the open tiles has value beyond just getting a random tile to spawn a new tile in. It also let's me do a partial check in for the end game condition. If I do get this as a `List<int, int>` and the length of that list is 0, we've met half the criteria for the end game state. 

The other half is whether I have any valid moves left. 

Should probably finish spawing in a new tile before worrying about that. Adding in a `SetTileValue()` method to set the value of a title. 

#!csharp

class GameBoard
{
	public int[,] testBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };

	public override string ToString() {
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			board += "-----------------\n";
			for (int j = 0; j < 4; j++)
			{
				board += $"| {testBoard[i,j]} ";
			}
			board += "|\n";
		}
		board += "-----------------\n";

		return board;
	}

	public List<(int, int)> GetOpenTiles()
	{
		List<(int, int)> openTiles = [];

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (testBoard[i,j] == 0)
				{
					openTiles.Add((i, j));
				}
			}
		}

		return openTiles;

	}

	public (int, int) GetRandomOpenTile()
	{
		var openTiles = GetOpenTiles();
		var r = new Random();
		return openTiles[r.Next(0, openTiles.Count())];
	}

	public void UglyUpThePlace()
	{
		var r = new Random();

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				testBoard[i,j] = r.Next(0,3) * 2;
			}
		}
	}

	public void SetTileValue(int newValue, int row, int col)
	{
		testBoard[row,col] = newValue;
	}
}

#!csharp

// add a new tile to an uglied up board
var gb = new GameBoard();
gb.UglyUpThePlace();
Console.WriteLine(gb.ToString());

var rnd = new Random();
int newTileValue = rnd.Next(1, 2) * 2;
var targetTile = gb.GetRandomOpenTile();
Console.WriteLine($"set {targetTile} to {newTileValue}\n");
gb.SetTileValue(newTileValue, targetTile.Item1, targetTile.Item2);
Console.WriteLine(gb.ToString());

#!csharp

// assign multiple random empty tiles
var gb = new GameBoard();
var rnd = new Random();
for (int i = 0; i < 5; i ++)
{
	int newTileValue = rnd.Next(1, 3) * 2;
	var targetTile = gb.GetRandomOpenTile();
	Console.WriteLine($"set {targetTile} to {newTileValue}");
	gb.SetTileValue(newTileValue, targetTile.Item1, targetTile.Item2);
	Console.WriteLine(gb.ToString());
}

#!markdown

This would be a good example of something I could reasonably unit test. Feed it some different boards and ensure that I'm getting back values that make sense. 

Something to consider if I were to actually go through and try to build this. 

I've got half of the game over state. It's not ideal. I'd prefer to have a shortcircuit out of there where if we find a single open tile we return. That's something to consider in the future.

The other half is to check for valid moves. I've already done a little bit of thinking around this. I need to be able to check adjacent tiles to validate. I'm looking at a basic rule set.

`board[x,y] `
* if x != 0 => check UP
* if x != 3 => check DOWN
* if y != 0 => check LEFT
* if y != 3 => check RIGHT

Now that I think of it, I don't need to check all four directions. The data I get going right to left is the same as the data left to right. All I need to do to verify whether a move remains is to check vertical, then horizontal. We can half the checks required.

`board[0,x] - board[2,x]` checking the tile below and `board[x,0] - board[x,2]` checking the tile to the right.

Further, we don't need to even check this if the initial check for open tiles passes. A basic logic flow would be something like:

```
PlayerMoves
SpawnNewTile
CheckGameOver
	if (AnyOpenTiles) return false;
	if (AnyValidMoves) return false;
	return true
```

Let's get that open tile check in play.

#!csharp

var testBoard = new int[,] { { 2, 2, 0, 0}, { 2, 4, 8, 8}, { 0, 4, 8, 0}, { 2, 2, 8, 0} };

// a `foreach` can iterate through this
foreach (var item in testBoard)
{
	Console.Write($"{item} ");
}
Console.WriteLine();

// but a multidimensional array doesn't implement IEnumerator<T>?
// I think this means Linq methods won't work without a cast
// and then it's not helpful to me if the indices aren't maintained
// but it will work for checking if Any values exist
Console.WriteLine(testBoard.Cast<int>().Any(o => o == 0));

#!csharp

class GameBoard
{
	public int[,] testBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };

	public override string ToString() {
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			board += "-----------------\n";
			for (int j = 0; j < 4; j++)
			{
				board += $"| {testBoard[i,j]} ";
			}
			board += "|\n";
		}
		board += "-----------------\n";

		return board;
	}

	public List<(int, int)> GetOpenTiles()
	{
		List<(int, int)> openTiles = [];

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (testBoard[i,j] == 0)
				{
					openTiles.Add((i, j));
				}
			}
		}

		return openTiles;

	}

	public (int, int) GetRandomOpenTile()
	{
		var openTiles = GetOpenTiles();
		var r = new Random();
		return openTiles[r.Next(0, openTiles.Count())];
	}

	public void UglyUpThePlace()
	{
		var r = new Random();

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				testBoard[i,j] = r.Next(0,3) * 2;
			}
		}
	}

	public void SetTileValue(int newValue, int row, int col)
	{
		testBoard[row,col] = newValue;
	}

	public bool HasOpenTiles() => testBoard.Cast<int>().Any(o => o == 0);
}

#!markdown

Using the `HasOpenTiles()` method to figure out if there are any open tiles remaining before placing a tile. Continue placing tiles until the table is full.

This is the first half of the game over condition check. 

#!csharp

var gb = new GameBoard();
gb.UglyUpThePlace();
Console.WriteLine(gb.ToString());

var rnd = new Random();
while (gb.HasOpenTiles())
{
	int newTileValue = rnd.Next(1, 2) * 2;
	var targetTile = gb.GetRandomOpenTile();
	Console.WriteLine($"set {targetTile} to {newTileValue}\n");
	gb.SetTileValue(newTileValue, targetTile.Item1, targetTile.Item2);
	Console.WriteLine(gb.ToString());
}
Console.WriteLine($"{gb.HasOpenTiles()} - Table is full");

#!markdown

I should be able to check for valid moves with just a simple board. I only need to check left -> right and top -> down. This is another instance where if I get a positive, I can just return.

I don't need to keep copy/pasting that class figure out what I need to do here.

#!csharp

var testBoard = new int[,] { { 2, 2, 0, 0}, { 2, 4, 8, 8}, { 0, 4, 8, 0}, { 2, 2, 8, 0} };

// check top to bottom
PrintBoard(testBoard);
for (int i = 0; i < 3; i++)
{
	for (int j = 0; j < 4; j++)
	{
		if (testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i+1,j])
		{
			Console.WriteLine($"vertical match at [{i},{j}] on value {testBoard[i,j]}");
		}
		if (testBoard[j,i] != 0 && testBoard[j,i] == testBoard[j,i+1])
		{
			Console.WriteLine($"horizontal match at [{j},{i}] on value {testBoard[j,i]}");
		}
	}
}

public void PrintBoard(int[,] testBoard)
{
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			board += "-----------------\n";
			for (int j = 0; j < 4; j++)
			{
				board += $"| {testBoard[i,j]} ";
			}
			board += "|\n";
		}
		board += "-----------------\n";

		Console.WriteLine(board);
}

#!markdown

Cram that into a method that returns a bool and return a `true` on the first hit. Combine it with the check for any open tiles and that's the game over condition check complete. Could pull that down to a more concise form.

Throw in a couple checks (future unit tests) to ensure that it's working at the appropriate ranges. That's perfect for what I need it for.

Got my checks for my `game over` state.

#!csharp

var testBoard = new int[,] { { 2, 2, 0, 0}, { 2, 4, 8, 8}, { 0, 4, 8, 0}, { 2, 2, 8, 0} };
var emptyBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };
var lastVerticalBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 2}, { 0, 0, 0, 2} };
var lastHorizontalBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 2, 2} };
var fullBoard = new int[,] { { 2, 4, 2, 4 }, { 4, 2, 4, 2}, { 2, 4, 2, 4 }, { 4, 2, 4, 2} };

Console.WriteLine(PlayableMoveExists(testBoard));
Console.WriteLine(PlayableMoveExists(emptyBoard));
Console.WriteLine(PlayableMoveExists(lastVerticalBoard));
Console.WriteLine(PlayableMoveExists(lastHorizontalBoard));
Console.WriteLine(PlayableMoveExists(fullBoard));

public bool PlayableMoveExists(int[,] testBoard)
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if ((testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i+1,j]) ||
				(testBoard[j,i] != 0 && testBoard[j,i] == testBoard[j,i+1]))
			{
				return true;
			}
		}

	}
	return false;
}

#!markdown

Game play movement. 

* swipe direction
* check adjacent tile in swipe direction
  * if empty -> move current value to adjacent tile
  * if occupied -> check if values match
    * if not -> do not move tile
    * if so -> set current tile to 0 and double adjacent tile

The important thing here is to make sure the movement follows the swipe. For example, we don't want tiles to merge if they should move to an empty space.

`| 0 | 2 | 2 | 0 |`

If we swipe either left or right we shouldn't get any merged tiles. We should end up with one of the following, depending on direction.

`| 2 | 2 | 0 | 0 |` -> left swipe

`| 0 | 0 | 2 | 2 |` -> right swipe

The `0` value in either far column is a temporary value marking it as available for the pool of tiles to randomly assign a new tile to. 

Just to get it out my head. 

If any two tiles merge, then the remaining tiles in that row or column can not, by definition, also merge. There is a single merge per row or column and the order of precendence is the same as the swipe direction. 

If the player swipes left, the two left columns take precendence. Then columns two and three. Followed by three and four. 

* player swipes down, rows one & two, two & three, three & four
* player swipes right, columns four & three, three & two, two & one
* player swipes up, rows four & three, three & two, two & one 

The additional rule here is that on any merge the final tile space will always be a `0`.

Final piece to implement is movement & merging of tiles. Once that's done I should be able to encapsulate everything into a single class that is technically playable within the polyglot notebook space.

I'm sure there's a clever way to do this, but I think I'm going to need to start from the bad, long version and work my way backward from there to a better version.

#!csharp

var testBoard = new int[,] { { 2, 2, 0, 0}, { 2, 4, 8, 8}, { 0, 4, 8, 0}, { 2, 2, 8, 0} };

PrintBoard(testBoard);
MoveLeft(testBoard);
PrintBoard(testBoard);
MoveRight(testBoard);
PrintBoard(testBoard);
MoveUp(testBoard);
PrintBoard(testBoard);
MoveDown(testBoard);
PrintBoard(testBoard);
MoveDown(testBoard);
PrintBoard(testBoard);

public int[,] MoveLeft(int[,] board)
{
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 3; j++)
		{
			if (board[i,j] == board[i,j+1] || board[i,j] == 0)
			{
				board[i,j] += board[i,j+1];
				board[i,j+1] = 0;
			}
		}

	return board;
}

public int[,] MoveRight(int[,] board)
{
	for (int i = 0; i < 4; i++)
		for (int j = 3; j > 0; j--)
		{
			if (board[i,j] == board[i,j-1] || board[i,j] == 0)
			{
				board[i,j] += board[i,j-1];
				board[i,j-1] = 0;
			}
		}

	return board;
}

public int[,] MoveUp(int[,] board)
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if ((board[i,j] == 0) || board[i,j] == board[i+1,j])
			{
				board[i,j] += board[i+1,j];
				board[i+1,j] = 0;
			}
		}
	}

	return board;
}

public int[,] MoveDown(int[,] board)
{
	for (int i = 3; i > 0; i--)
	{
		for (int j = 0; j < 4; j++)
		{
			if ((board[i,j] == 0) || board[i,j] == board[i-1,j])
			{
				board[i,j] += board[i-1,j];
				board[i-1,j] = 0;
			}
		}
	}

	return board;
}

public void PrintBoard(int[,] testBoard)
{
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			board += "-----------------------------\n";
			for (int j = 0; j < 4; j++)
			{
				var tileNumber = testBoard[i,j].ToString();
				board += $"| {tileNumber.PadLeft(4, ' ')} ";
			}
			board += "|\n";
		}
		board += "-----------------------------\n";

		Console.WriteLine(board);
}

#!markdown

Well, that is definitely ugly. But it works. I'm able to move items around and they're merging appropriately. I have all the necessary functionality to make a CLI based 2048. 

Cram all of this into a class and see what else I really need.

#!csharp

class GameBoard
{
	public int[,] testBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };

	public override string ToString() {
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			board += "-----------------\n";
			for (int j = 0; j < 4; j++)
			{
				board += $"| {testBoard[i,j]} ";
			}
			board += "|\n";
		}
		board += "-----------------\n";

		return board;
	}

	public List<(int, int)> GetOpenTiles()
	{
		List<(int, int)> openTiles = [];

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (testBoard[i,j] == 0)
				{
					openTiles.Add((i, j));
				}
			}
		}

		return openTiles;
	}

	public void SetOpenTile()
	{
		var openTiles = GetOpenTiles();
		var r = new Random();
		var tile = openTiles[r.Next(0, openTiles.Count())];
		testBoard[tile.Item1, tile.Item2] = (int)r.Next(1, 3) * 2;
	}

	public void UglyUpThePlace()
	{
		var r = new Random();

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				testBoard[i,j] = r.Next(0,3) * 2;
			}
		}
	}

	public void MoveLeft()
	{
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 3; j++)
			{
				if (testBoard[i,j] == testBoard[i,j+1] || testBoard[i,j] == 0)
				{
					testBoard[i,j] += testBoard[i,j+1];
					testBoard[i,j+1] = 0;
				}
			}
	}

	public void MoveRight()
	{
		for (int i = 0; i < 4; i++)
			for (int j = 3; j > 0; j--)
			{
				if (testBoard[i,j] == testBoard[i,j-1] || testBoard[i,j] == 0)
				{
					testBoard[i,j] += testBoard[i,j-1];
					testBoard[i,j-1] = 0;
				}
			}
	}

	public void MoveUp()
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if ((testBoard[i,j] == 0) || testBoard[i,j] == testBoard[i+1,j])
				{
					testBoard[i,j] += testBoard[i+1,j];
					testBoard[i+1,j] = 0;
				}
			}
		}
	}

	public void MoveDown()
	{
		for (int i = 3; i > 0; i--)
		{
			for (int j = 0; j < 4; j++)
			{
				if ((testBoard[i,j] == 0) || testBoard[i,j] == testBoard[i-1,j])
				{
					testBoard[i,j] += testBoard[i-1,j];
					testBoard[i-1,j] = 0;
				}
			}
		}
	}

	public bool OpenTileExists() => testBoard.Cast<int>().Any(o => o == 0);

	public bool PlayableMoveExists(int[,] testBoard)
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if ((testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i+1,j]) ||
					(testBoard[j,i] != 0 && testBoard[j,i] == testBoard[j,i+1]))
				{
					return true;
				}
			}

		}
		return false;
	}
}

#!csharp

var gb = new GameBoard();
gb.UglyUpThePlace();
Px();
gb.MoveLeft();
gb.SetOpenTile();
Px();
gb.MoveLeft();
gb.SetOpenTile();
Px();

public void Px()
{
	Console.WriteLine(gb.ToString());
}

#!markdown

I'm missing a game loop at this point. I can't do input in a polyglot notebook. So, to test this I would need to actually create a proper app.

Nope. I'm missing whether a move was valid or not. If nothing changes position then no move should be taken and no new tile should be spawned.

#!csharp

class GameBoard
{
	public int[,] testBoard = new int[,] { { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0}, { 0, 0, 0, 0} };

	public void RunGame()
	{
		SetOpenTile();
		SetOpenTile();
		Console.Clear();
		Console.WriteLine(ToString());
		var gameLoop = true;
		while (gameLoop)
		{

			Console.Write("move: ");
			var direction = Console.ReadLine();
			var spawnNewTile = false;

			switch(direction)
			{
				case "l":
					spawnNewTile = MoveLeft();
					break;
				case "r":
					spawnNewTile = MoveRight();
					break;
				case "d":
					spawnNewTile = MoveDown();
					break;
				case "u":
					spawnNewTile = MoveUp();
					break;
				case "x":
					gameLoop = false;
					return;
			}

			if (spawnNewTile) SetOpenTile();
			Console.Clear();
			Console.WriteLine(ToString());
			gameLoop = OpenTileExists() || PlayableMoveExists();
		}
		Console.WriteLine("Game Over");
	}

	public override string ToString() {
		string board = "";

		for (int i = 0; i < 4; i++)
		{
			board += "-------------------------\n";
			for (int j = 0; j < 4; j++)
			{
				var tileValue = testBoard[i,j].ToString().PadLeft(4, ' ');
				board += $"|{tileValue} ";
			}
			board += "|\n";
		}
		board += "-------------------------\n";

		return board;
	}

	public List<(int, int)> GetOpenTiles()
	{
		List<(int, int)> openTiles = [];

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if (testBoard[i,j] == 0)
				{
					openTiles.Add((i, j));
				}
			}
		}

		return openTiles;
	}

	public void SetOpenTile()
	{
		var openTiles = GetOpenTiles();
		var r = new Random();
		var tile = openTiles[r.Next(0, openTiles.Count())];
		testBoard[tile.Item1, tile.Item2] = (int)r.Next(1, 3) * 2;
	}

	public void UglyUpThePlace()
	{
		var r = new Random();

		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				testBoard[i,j] = r.Next(0,3) * 2;
			}
		}
	}

	public bool MoveLeft()
	{
		var moveCompleted = false;
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 3; j++)
			{
				if (
					(testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i,j+1]) ||
					(testBoard[i,j] == 0 && testBoard[i,j+1] != 0))
				{
					testBoard[i,j] += testBoard[i,j+1];
					testBoard[i,j+1] = 0;
					moveCompleted = true;
				}
			}
		return moveCompleted;
	}

	public bool MoveRight()
	{
		var moveCompleted = false;
		for (int i = 0; i < 4; i++)
			for (int j = 3; j > 0; j--)
			{
				if (
					(testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i,j-1]) ||
					(testBoard[i,j] == 0 && testBoard[i,j-1] != 0))
				{
					testBoard[i,j] += testBoard[i,j-1];
					testBoard[i,j-1] = 0;
					moveCompleted = true;
				}
			}
		return moveCompleted;
	}


	public bool MoveUp()
	{
		var moveCompleted = false;
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 4; j++)
			{
				if (
					(testBoard[i,j] == 0 && testBoard[i+1,j] != 0) ||
					(testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i+1,j]))
				{
					testBoard[i,j] += testBoard[i+1,j];
					testBoard[i+1,j] = 0;
					moveCompleted = true;
				}
			}
		return moveCompleted;
	}

	public bool MoveDown()
	{
		var moveCompleted = false;
		for (int i = 3; i > 0; i--)
			for (int j = 0; j < 4; j++)
			{
				if (
					(testBoard[i,j] == 0 && testBoard[i-1,j] != 0) ||
					(testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i-1,j]))
				{
					testBoard[i,j] += testBoard[i-1,j];
					testBoard[i-1,j] = 0;
					moveCompleted = true;
				}
			}
		return moveCompleted;
	}

	public bool OpenTileExists() => testBoard.Cast<int>().Any(o => o == 0);

	public bool PlayableMoveExists()
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				if ((testBoard[i,j] != 0 && testBoard[i,j] == testBoard[i+1,j]) ||
					(testBoard[j,i] != 0 && testBoard[j,i] == testBoard[j,i+1]))
				{
					return true;
				}
			}

		}
		return false;
	}
}

#!markdown

That is the full game encapsulated within the class. All that needs to be done to run this is: `new GameBoard().RunGame();` 

![](images/screenshot.png)

Again, that won't work in the polyglot notebook, as it can't take input. A new C# console project with that line at the top and the class underneath it in `Program.cs` is enough to make it work.

All of that said, this is absolutely not a good way to do this. It's also not the _Godot way_ to do this. Even if I wanted to use this code I'd have to add additional functionality in here to communicate state back to tile nodes that would be impractical when I could do this a couple different ways in Godot directly.

It was a good exercise to walk through. I'm happy I was able to put some thought into the game rules and their implementation. If I make a 2048/Hues style game in Godot I don't see this code surviving that process, but the experience will follow through.
